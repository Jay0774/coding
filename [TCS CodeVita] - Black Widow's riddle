PROBLEM:

Good job on cracking that password. Being a superhero isn't easy, so why did you think being a superhero intern would be easy?

Also, did you realize that you applied to the Justice League, yet the last challenge you were working for the Avengers? Black Widow noticed this anomaly and she suspects you aren't from the Avengers - she thinks you're with Thanos!

You want to prove that you're one of the good people. This is the test she has for you. You are given a set of people in a NxN power grid. Some of them are Titans, friends of Thanos.

You can know if they are Titans by knowing if there are any repeated people in a particular row or column of the power grid.

If there are no repeated people in the rows or columns, then the power grid contains no Titans.

Given an NxN grid, you must print:

SAFE if there are no titans
DANGER, followed by number of rows and columns where the repeated people are
Input Format
First line contains T, the number of test cases
This is followed by N N, the size of the grid followed by N x N numbers denoting the grid
Output Format
SAFE if there are no titans
DANGER, followed by number of rows and columns where the repeated people are
Example Input
4
2 2 1 2 3 4
3 3 1 2 3 3 1 2 4 5 6
3 3 1 2 3 1 2 3 1 2 3
4 4 1 2 3 1 2 3 4 5 6 7 8 9 10 2 12 1
Example Output
SAFE
SAFE
DANGER 0 3
DANGER 1 2
Explanation
First and second case are safe because there are no repeated elements
In third case, no row has repeated elements but all 3 columns have repeated elements hence DANGER 0 3
In fourth case, first row as 1 repeated. 2nd column has 2 repeated, and last column also has 1 repeated hence DANGER 1 2


__________________________________________________________________________________________________________________________________________________________________________

SOLUTION:

#include<iostream>
#include<bits/stdc++.h>
#include<set>
using namespace std;
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        multiset<int> m;
        string s;
        int n1,n2,n;
        cin>>n1>>n2;
        n=n1*n2;
        int a[n1][n2],i,j,c1=0,c2=0,c,R=0,C=0;
        for(i=0;i<n1;i++)
        {
            for(j=0;j<n2;j++)
            {
                cin>>a[i][j];
            }
        }
        for(i=0;i<n1;i++)
        {
            c1=0;
            m.clear();
            for(j=0;j<n2;j++)
            {
                m.insert(a[i][j]);
            }
            for(j=0;j<n2;j++)
            {
                c=m.count(a[i][j]);
                if(c>=2)
                    c1++;
                
            }
            
            if(c1>0)
                R++;
        }
        for(i=0;i<n1;i++)
        {
            c2=0;
            m.clear();
            for(j=0;j<n2;j++)
            {
                m.insert(a[j][i]);
            }
            for(j=0;j<n2;j++)
            {
                c=m.count(a[j][i]);
                if(c>=2)
                    c2++;
                
            }
            
            if(c2>0)
                C++;
        }
        if(R==0 && C==0)
        {
            s="SAFE";
            cout<<s<<endl;
        }
        else
        {
            s="DANGER";
        	cout<<s<<" "<<R<<" "<<C<<endl;    
        }
        
    }
}







